// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "system.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SystemSvc } from "./system";
import type { LogRequest } from "./system";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Settings } from "./system";
import type { Empty } from "./common";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SystemSvc
 */
export interface ISystemSvcClient {
    /**
     * @generated from protobuf rpc: GetSettings(Empty) returns (Settings);
     */
    getSettings(input: Empty, options?: RpcOptions): UnaryCall<Empty, Settings>;
    /**
     * @generated from protobuf rpc: Log(LogRequest) returns (Empty);
     */
    log(input: LogRequest, options?: RpcOptions): UnaryCall<LogRequest, Empty>;
}
/**
 * @generated from protobuf service SystemSvc
 */
export class SystemSvcClient implements ISystemSvcClient, ServiceInfo {
    typeName = SystemSvc.typeName;
    methods = SystemSvc.methods;
    options = SystemSvc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSettings(Empty) returns (Settings);
     */
    getSettings(input: Empty, options?: RpcOptions): UnaryCall<Empty, Settings> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Settings>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Log(LogRequest) returns (Empty);
     */
    log(input: LogRequest, options?: RpcOptions): UnaryCall<LogRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
